---
layout: single
title: "[Algorithms] Queue Algorithms"
date: 2022-10-24
description: Queue Algorithms
sidebar:
  nav: "docs"
---

## 큐 (Queue) 란?

스택과 같이 데이터를 임시 저장하는 자료구조
<br>
데이터의 입력과 출력 순서는 선입선출 (FIFO) 방식
<br>

### 관련 용어
 - Enqueue: 큐에 데이터를 넣는 기능
 - Dequeue: 큐에서 데이터를 꺼내는 기능
 - Front: 데이터를 꺼내는 쪽
 - Rear: 데이터를 넣는 쪽
<br>

멀티 태스킹을 위한 프로세스 스케줄링 방식을 구현하기 위해 많이 사용됨
<br>

### 큐 구현하기
Enqueue 시 맨 끝에 넣고, Dequeue 시 가장 앞에서 꺼낸 후 모든 원소를 하나씩 앞으로 옮긴다. 넣을 땐 처리 복잡도가 O(1) 이지만 꺼낼 때는 O(n) 이다.
<br>

### **링버퍼로 큐 구현**
- 링버퍼: 배열 맨 끝의 원소 뒤에 맨 앞의 원소가 연결되는 자료구조
- 어떤 원소가 맨 앞 원소이고, 끝 원소인지 식별하는 변수가 각각 Front, Rear 다.
- 링버퍼로 구현 시 꺼낼 때, 넣을 때 모두 처리 복잡도가 O(1) 이다.
<br>

### **예외 처리 클래스 Empty, Full**
- 스택과 같음
<br>

### **초기화하는 __init() 함수**
- 큐 배열을 생성하는 등의 준비 작업을 하며 아래와 같이 5개의 변수에 값을 설정
  - que: 큐의 배열로서 밀어넣는 데이터를 저장하는 list 형의 배열
  - capacity: 큐의 최대 크기를 나타내는 int 형 정수, que 의 원소 수와 일치
  - front, rear: 맨 앞의 우너소, 맨 뒤 원소 인덱스
  - no: 큐에 쌓여있는 데이터 갯수를 나타내는 int 형 정수
<br>

### **is_full(), is_empty(), len 함수**
- 스택과 같음
<br>

### **데이터를 넣는 enqueue() 함수**
큐에 데이터를 Enqueue 한다. 큐가 가득차서 Enqueue 할 수 없는 경우, 예외 처리인 FixedQueue.Full 을 내보낸다.
<br>

### **데이터를 꺼내는 dequeue() 함수**
큐의 맨 앞부터 데이터를 dequeue 하여 그 값을 반환한다. 그러나 큐가 비어있어 dequeue 할 수 없는 경우, 예외 처리인 FixedQueue.Empty 를 내보낸다.
<br>

### **peek(), find(), count(), contains(), clear(), dump() 함수**
스택과 같음
<br>

## ++ 링버퍼의 활용 ++
링버퍼는 오래된 데이터를 버리는 용도로 활용할 수 있다. 예를 들어 원소 수가 n 인 배열에 데이터를 계속해서 입력할 때, 가장 최근에 들어온 데이터 n 개만 저장하고 나머지 오래된 데이터는 버리는 경우에 이용한다.