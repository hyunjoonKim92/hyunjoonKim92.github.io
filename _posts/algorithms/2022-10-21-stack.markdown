---
layout: single
title: "[Algorithms] Stack Algorithms"
date: 2022-10-21
description: Stack Algorithms
sidebar:
  nav: "docs"
---

## 스택 (Stack) 이란?

데이터를 임시 저장할 때 사용하는 자료구조
<br>
데이터의 입력과 출력 순서는 후입선출 (FILO) 방식
<br>
데이터를 제한적으로 접근할 수 있는 구조
<br>
한 쪽 끝에서만 자료를 넣거나 뺼 수 있는 구조
<br>

스택은 콜 스택 (call stack) 이라 하여 컴퓨터 프로그램의 서브루틴에 대한 정보를 저장하는 자료구조에도 널리 활용된다.
<br><br>
스택은 메모리 영역에서 LIFO 형태로 할당하고 접근하는 구조인 아키텍처 레벨의 하드웨어 스택의 이름으로도 널리 사용된다.
<br><br>
꽉 찬 스택에 요소를 삽입하고자 할 때, 스택에 요소가 넘쳐서 에러가 발생하는 것을 스택 버퍼 오버플로 (stack buffer overflow) 라고 부른다. 질의응답 서비스 사이트인 스택오버플로의 명칭도 여기서 유래했다.
<br><br>
스택은 거의 모든 어플리케이션을 만들 때 사용되는 자료구조로서, 스택과 연관된 알고리즘을 제대로 이해하느냐 못하느냐에 따라 기본 알고리즘을 설계할 수 있느냐 없느냐가 결정되기도 한다.
<br>

## **스택 구조**

- LIFO 또는 FILO 데이터 관리 방식을 따름
- 대표적인 스택의 활용으로는 컴퓨터 내부의 프로세스 구조의 함수 동작 방식
- 주요 기능
  - push(): 데이터를 스택에 넣기
  - pop(): 데이터를 스택에서 꺼내기
- 스택의 크기: 스택에 쌓을 수 있는 데이터의 최대 갯수
<br>

## **스택 구조와 프로세스**

- 스택 구조는 프로세스 실행 구조의 가장 기본
- 함수 호출 시 프로세스 실행 구조를 스택과 비교해서 이해 필요
<br>

## **스택의 장, 단점**
### 장점
- 구조가 단순해서 구현이 쉽다.
- 데이터 저장/읽기 속도가 빠르다.

### 단점
- 데이터 최대 갯수를 미리 정해야 한다.
- 저장 공간의 낭비가 발생할 수 있다.

스택의 경우 단순하고 빠른 성능을 위해 사용되므로 보통 배열 구조를 활용해서 구현하는 것이 일반적이다. 이 경우, 상기 열거한 단점이 있을 수 있다.
<br>

## **스택 구현하기**

### 스택 배열: **stk**
push 한 데이터를 저장하는 스택 본체인 list 형 배열, 인덱스가 0 인 원소를 스택의 바닥이라고 한다.
<br>

### 스택 크기: **capacity**
스택의 최대 크기를 나타내는 int 형 정수이다. 이 값은 배열 stk 의 원소 수인 len(stk) 와 일치한다.
<br>

### 스택 포인터: **ptr**
스택에 쌓여 있는 데이터의 갯수를 나타내는 정수값을 스택 포인터라고 한다.
<br>

### 예외 처리 클래스 **Empty**
pop() 함수 또는 peek() 함수를 호출할 때, 스택이 비어 있으면 내보내는 예외 처리이다.
<br>

### 예외 처리 클래서 **Full**
push() 함수를 호출할 때, 스택이 가득 차 있으면 내보내는 예외 처리이다.
<br>

### 초기화하는 **init()** 함수
스택 배열을 생성하는 등의 준비 작업을 수행한다. 매개변수 capcity 로 전달받은 값을 스택의 크기를 나타내는 필드인 capacity 로 복사하여 원소 수가 capacity 이고 모든 원소가 None 인 리스트형 stk 를 생성한다. 스택이 비어 있으므로 스택 포인터의 값을 0 으로 한다.
<br>

### 쌓여 있는 데이터 갯수를 알아내는 **len()** 함수
스택에 쌓여 있는 데이터 갯수를 반환한다. 여기서는 스택 포인터 값을 그대로 반환한다.
<br>

### 스택이 비어 있는지를 판단하는 **is_empty()** 함수
비어 있으면 True, 아니면 False 반환
<br>

### **is_full()** 함수
가득 차 있으면 True, 아니면 False 반환
<br>

### 데이터를 밀어넣는 **push()** 함수
스택에 데이터를 추가한다. 스택이 가득 차 더 이상 push 할 수 없는 경우 FixedStack.Full 을 통해 예외 처리를 내보낸다.
<br>

### 데이터를 꺼내는 **pop()** 함수
스택의 꼭대기에서 데이터를 꺼내서 그 값을 반환한다. 스택이 비어서 꺼낼 수 없는 경우에는 FixedStack.Empty 를 통해 예외 처리를 내보낸다.
<br>

### 데이터를 들여다보는 **peek()** 함수
스택의 꼭대기 데이터 (다음에 꺼내는 데이터) 를 들여다본다. 스택이 비어 있는 경우 FixedStack.Empty 를 통해 예외 처리를 내보낸다.
<br>

### 스택의 모든 데이터를 삭제하는 **claer()** 함수
스택에 쌓여 있는 데이터를 모두 삭제하여 빈 스택을 만든다. 스택 포인터 값을 0 으로 하면 끝난다.
<br>

### 데이터를 검색하는 **find()** 함수
스택 본체의 배열 stk 안에 value 와 같이 값이 같은 데이터가 포함되어 있는지 확인하고, 포함되어 있다면 배열의 어디에 들어 있는지 검색한다.
<br>

### 데이터 갯수를 세는 **count()** 함수
스택에 쌓여 있는 데이터 (value) 의 갯수를 구하여 반환한다.
<br>

### 데이터가 포함되어 있는지 판단하는 **contains()** 함수
스택에 데이터 (value) 가 있는지 판단한다. 있으면 True, 없으면 False 를 반환한다. 멤버십 판단 연산자 (membership test operator) 인 in 을 사용할 수 있다.
<br>

### 스택의 모든 데이터를 출력하는 **dump()** 함수
스택에 쌓여있는 ptr 개의 모든 데이터를 바닥부터 꼭대기까지 순서대로 출력한다.
<br>

### **dunder** 함수
밑줄 2개(__) 인 더블 언더스코어를 줄여서 던더라고 한다. 던더 함수로 len() 함수와 contains() 함수를 정의하면 len(obj), x in obj 로 사용할 수 있다.
<br><br>

다음 장에서는 큐에 대해 다뤄보겠다.